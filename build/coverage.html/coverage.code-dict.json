{"/home/travis/build/npmtest/node-npmtest-ember-intl/test.js":"/* istanbul instrument in package npmtest_ember_intl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-intl/lib.npmtest_ember_intl.js":"/* istanbul instrument in package npmtest_ember_intl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_intl = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_intl = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-intl/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-intl && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_intl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_intl\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_intl.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_intl.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_intl.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_intl.__dirname + '/lib.npmtest_ember_intl.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/index.js":"/* jshint node: true */\n\n'use strict';\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nlet WatchedDir = require('broccoli-source').WatchedDir;\nlet stringify = require('json-stable-stringify');\nlet mergeTrees = require('broccoli-merge-trees');\nlet extract = require('broccoli-cldr-data');\nlet funnel = require('broccoli-funnel');\nlet existsSync = require('exists-sync');\nlet walkSync = require('walk-sync');\nlet path = require('path');\n\nlet utils = require('./lib/utils');\nlet TranslationReducer = require('./lib/broccoli/translation-reducer');\n\nmodule.exports = {\n  name: 'ember-intl',\n  addonOptions: null,\n  isLocalizationFramework: true,\n\n  included() {\n    this._super.included.apply(this, arguments);\n\n    let app = this.app = this._findHost();\n    this.addonOptions = this.intlConfig(app.env);\n\n    let inputPath = this.addonOptions.inputPath || 'translations';\n    this.hasTranslationDir = existsSync(path.join(app.project.root, inputPath));\n    this.projectLocales = this.findLocales();\n\n    let projectTranslations = new WatchedDir(inputPath);\n\n    let addonTranslations = this.findIntlAddons().map(function(addon) {\n      return funnel(addon.path, {\n        srcDir: addon.translationPath,\n        destDir: `__addon__${addon.name}`\n      });\n    }, this);\n\n    this.translationTree = this.mergeTranslationTrees(projectTranslations, addonTranslations);\n  },\n\n  outputPaths() {\n    let assetPath = 'assets/intl';\n    let appOptions = this.app.options;\n\n    if (appOptions.app && appOptions.app.intl) {\n      assetPath = appOptions.app.intl;\n    }\n\n    return assetPath;\n  },\n\n  contentFor(name, config) {\n    if (name === 'head' && !this.addonOptions.disablePolyfill && this.addonOptions.autoPolyfill) {\n      let assetPath = this.outputPaths();\n      let locales = this.findLocales();\n      let prefix = '';\n\n      if (config.rootURL) { prefix += config.rootURL; }\n      if (assetPath) { prefix += assetPath; }\n\n      let localeScripts = locales.map(function(locale) {\n        return `<script src=\"${prefix}/locales/${locale}.js\"></script>`;\n      });\n\n      return [`<script src=\"${prefix}/intl.min.js\"></script>`]\n        .concat(localeScripts)\n        .join('\\n');\n    }\n  },\n\n  treeForApp(tree) {\n    let trees = [tree];\n\n    if (this.hasTranslationDir && !this.addonOptions.publicOnly) {\n      trees.push(this.reduceTranslations({\n        filename(key) {\n          return `${key}.js`;\n        },\n        wrapEntry(obj) {\n          return `export default ${stringify(obj)};`;\n        }\n      }));\n    }\n\n    if (tree && this.projectLocales.length) {\n      let cldrTree = extract(tree, {\n        locales: this.projectLocales,\n        relativeFields: true,\n        destDir: 'cldrs',\n        prelude: '/*jslint eqeq: true*/\\n',\n        moduleType: 'es6'\n      });\n\n      trees.push(cldrTree);\n    }\n\n    return mergeTrees(trees, { overwrite: true });\n  },\n\n  treeForPublic() {\n    let publicTree = this._super.treeForPublic.apply(this, arguments);\n    let trees = [];\n\n    if (publicTree) {\n      trees.push(publicTree);\n    }\n\n    if (!this.addonOptions.disablePolyfill) {\n      let appOptions = this.app.options || {};\n\n      trees.push(require('./lib/broccoli/intl-polyfill')({\n        locales: this.projectLocales,\n        destDir: appOptions.app && appOptions.app.intl || 'assets/intl'\n      }));\n    }\n\n    if (this.hasTranslationDir && this.addonOptions.publicOnly) {\n      trees.push(this.reduceTranslations());\n    }\n\n    return mergeTrees(trees, { overwrite: true });\n  },\n\n  log(msg, options) {\n    if (this.app.options && this.app.options.intl && this.app.options.intl.silent) {\n      return;\n    }\n\n    if (options && options.warning && this.ui.writeWarnLine) {\n      this.ui.writeWarnLine(`[ember-intl] ${msg}`);\n    } else {\n      this.ui.writeLine(`[ember-intl] ${msg}`);\n    }\n  },\n\n  readConfig(environment) {\n    let project = this.app.project;\n\n    // NOTE: For ember-cli >= 2.6.0-beta.3, project.configPath() returns absolute path\n    // while older ember-cli versions return path relative to project root\n    let configPath = path.dirname(project.configPath());\n    let config = path.join(configPath, 'ember-intl.js');\n\n    if (!path.isAbsolute(config)) {\n      config = path.join(project.root, config);\n    }\n\n    if (existsSync(config)) {\n      return require(config)(environment);\n    }\n\n    return {};\n  },\n\n  intlConfig(environment) {\n    let deprecatedConfig = this.app.project.config(environment)['intl'];\n    let addonConfig = Object.assign(this.readConfig(environment), deprecatedConfig || {});\n\n    if (deprecatedConfig) {\n      this.log('DEPRECATION: intl configuration should be moved into config/ember-intl.js');\n      this.log('Run `ember g ember-intl-config` to create a default config');\n    }\n\n    if (addonConfig.defaultLocale) {\n      this.log('DEPRECATION: defaultLocale is deprecated in favor of baseLocale');\n      this.log('Please update config/ember-intl.js or config/environment.js');\n      addonConfig.baseLocale = addonConfig.defaultLocale;\n    }\n\n    addonConfig = Object.assign({\n      locales: null,\n      baseLocale: null,\n      publicOnly: false,\n      disablePolyfill: false,\n      autoPolyfill: false,\n      inputPath: 'translations',\n      outputPath: 'translations'\n    }, addonConfig);\n\n    if (addonConfig.locales) {\n      addonConfig.locales = utils.castArray(addonConfig.locales).filter(function(locale) {\n        return typeof locale === 'string';\n      }).map(function(locale) {\n        return locale.toLocaleLowerCase();\n      });\n    }\n\n    return addonConfig;\n  },\n\n  findLocales() {\n    let locales = [];\n\n    if (this.hasTranslationDir) {\n      locales = locales.concat(walkSync(path.join(this.app.project.root, this.addonOptions.inputPath), {\n        directories: false\n      }).map(function(filename) {\n        return path.basename(filename, path.extname(filename)).toLowerCase().replace(/_/g, '-');\n      }));\n    }\n\n    if (this.addonOptions.locales) {\n      locales = locales.concat(this.addonOptions.locales);\n    }\n\n    locales = locales.concat(locales.filter(function(locale) {\n      if (utils.isSupportedLocale(locale)) {\n        return true;\n      }\n\n      this.log(`'${locale}' is not a valid locale name`);\n\n      return false;\n    }, this));\n\n    return utils.unique(locales);\n  },\n\n  findIntlAddons() {\n    let projectName = this.app.project.name();\n    let addons = this.app.project.addons;\n    let registered = new Set();\n\n    let find = function(list, addon) {\n      // Only handle each addon once\n      if (registered.has(addon.name)) {\n        return list;\n      }\n\n      let translationPath = addon.pkg['ember-addon'].translationPath || 'translations';\n\n      if (projectName !== addon.name && existsSync(path.join(addon.root, translationPath))) {\n        list.push({\n          name: addon.name,\n          translationPath: translationPath,\n          path: addon.root\n        });\n\n        registered.add(addon.name);\n      }\n\n      // Recursively load all child addons\n      return addon.addons.reduce(find, list);\n    };\n\n    return addons.reduce(find, []);\n  },\n\n  mergeTranslationTrees(projectTranslations, addonTranslations) {\n    let trees = [];\n    trees.push(projectTranslations);\n\n    if (addonTranslations && addonTranslations.length) {\n      trees = trees.concat(addonTranslations);\n    }\n\n    return funnel(mergeTrees(trees), {\n      include: ['**/*.yaml', '**/*.yml', '**/*.json']\n    });\n  },\n\n  reduceTranslations(opts) {\n    if (!opts) { opts = {}; }\n    let addon = this;\n\n    return new TranslationReducer([this.translationTree], Object.assign({}, this.addonOptions, opts, {\n      verbose: !(this.app.options && this.app.options.intl && this.app.options.intl.silent),\n      log() {\n        return addon.log.apply(addon, arguments);\n      }\n    }));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/index.js":"/* jshint node: true */\n\n'use strict';\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nmodule.exports = {\n  unique: require('./unique'),\n  castArray: require('./cast-array'),\n  isSupportedLocale: require('./is-supported-locale')\n};\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/unique.js":"/* jshint node: true */\n\n'use strict';\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nlet castArray = require('./cast-array');\n\nfunction unique(array) {\n  let found = Object.create(null);\n  let out = [];\n\n  castArray(array).forEach(item => {\n    if (typeof item !== 'string' || found[item.toLocaleLowerCase()]) {\n      return;\n    }\n\n    out.push(item);\n    found[item.toLocaleLowerCase()] = true;\n  });\n\n  return out;\n}\n\nmodule.exports = unique;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/cast-array.js":"'use strict';\r\n\r\nfunction castArray(obj) {\r\n  if (typeof obj === 'undefined') {\r\n    return [];\r\n  }\r\n\r\n  return Array.isArray(obj) ? obj : [obj];\r\n}\r\n\r\nmodule.exports = castArray;\r\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/is-supported-locale.js":"/* jshint node: true */\n\n'use strict';\n\nfunction isSupportedLocale(locale) {\n  if (!/^[a-zA-Z0-9-]+$/.test(locale)) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = isSupportedLocale;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/broccoli/translation-reducer.js":"/* jshint node: true */\n\n'use strict';\n\n/**\n* Copyright 2015, Yahoo! Inc.\n* Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n*/\n\nlet CachingWriter = require('broccoli-caching-writer');\nlet stringify = require('json-stable-stringify');\nlet mkdirp = require('mkdirp');\nlet extend = require('extend');\nlet yaml = require('js-yaml');\nlet path = require('path');\nlet fs = require('fs');\nlet hasUnicode = require('has-unicode');\nlet localeEmoji = require('locale-emoji');\n\nlet propKeys = require('../utils/prop-keys');\nlet forEachMessage = require('../utils/for-each-message');\nlet validateMessage = require('../utils/validate-message');\n\nfunction readAsObject(filepath) {\n  let data = fs.readFileSync(filepath);\n  let ext = path.extname(filepath);\n\n  switch (ext) {\n    case '.json':\n      return JSON.parse(data);\n    case '.yaml':\n    case '.yml':\n      return yaml.load(data, 'utf8');\n  }\n}\n\nclass TranslationReducer extends CachingWriter {\n  constructor(inputNode, options) {\n    if (!Array.isArray(inputNode)) {\n      inputNode = [inputNode];\n    }\n\n    super(inputNode, {\n      annotation: 'Translation Reducer'\n    });\n\n    this.options = Object.assign(\n      {\n        log() {}\n      },\n      options\n    );\n\n    this._supportsUnicode = hasUnicode();\n  }\n\n  normalizeLocale(locale) {\n    if (typeof locale === 'string') {\n      return locale.replace(/_/g, '-').toLowerCase();\n    }\n\n    return locale;\n  }\n\n  _logLocale(locale, message, options) {\n    let fullMessage = `${locale}: ${message}`;\n    if (this._supportsUnicode) {\n      let emoji = localeEmoji(locale.replace(/-([a-z]{2})$/, (match, it) => `-${it.toUpperCase()}`));\n      if (emoji) {\n        fullMessage = `${emoji}  ${fullMessage}`;\n      }\n    }\n\n    this._log(fullMessage, options);\n  }\n\n  _log(msg, options) {\n    if (this.options.log) {\n      return this.options.log.apply(undefined, arguments);\n    }\n  }\n\n  findMissingKeys(target, defaultTranslationKeys, locale) {\n    let targetProps = propKeys(target);\n\n    defaultTranslationKeys.forEach(property => {\n      if (targetProps.indexOf(property) === -1) {\n        this._logLocale(locale, `\"${property}\" message is missing`);\n      }\n    });\n  }\n\n  readDirectory(inputPath, listFiles) {\n    let plugin = this;\n\n    // sorted so that any translation path starts with `__addon__`\n    // move to the head of the array.  this ensures the application's translations\n    // take presidence over addon translations.\n    let sortedPaths = listFiles.sort((a, b) => {\n      if (path.relative(inputPath, a).indexOf('__addon__') === 0) {\n        return -1;\n      }\n\n      return 1;\n    });\n\n    return sortedPaths.reduce(\n      (translations, translationPath) => {\n        if (fs.statSync(translationPath).isDirectory()) {\n          return translations;\n        }\n\n        let translation = readAsObject(translationPath);\n\n        if (!translation) {\n          plugin._log(`cannot read path \"${translationPath}\"`);\n          return translations;\n        }\n\n        let basename = path.basename(translationPath).split('.')[0];\n        let keyedTranslation = {};\n        keyedTranslation[plugin.normalizeLocale(basename)] = translation;\n\n        return extend(true, translations, keyedTranslation);\n      },\n      {}\n    );\n  }\n\n  filename(key) {\n    if (typeof this.options.filename === 'function') {\n      return this.options.filename(key);\n    }\n\n    return `${key}.json`;\n  }\n\n  wrapEntry(obj) {\n    if (typeof this.options.wrapEntry === 'function') {\n      return this.options.wrapEntry(obj);\n    }\n\n    return stringify(obj);\n  }\n\n  build() {\n    let outputPath = `${this.outputPath}/${this.options.outputPath}`;\n    let baseLocale = this.options.baseLocale;\n    let translations = this.readDirectory(this.inputPaths[0], this.listFiles());\n    let defaultTranslationKeys, defaultTranslation, translation;\n    mkdirp.sync(outputPath);\n\n    if (baseLocale) {\n      defaultTranslation = translations[this.normalizeLocale(baseLocale)];\n\n      if (this.options.verbose) {\n        defaultTranslationKeys = propKeys(defaultTranslation);\n      }\n    }\n\n    for (let locale in translations) {\n      if (translations.hasOwnProperty(locale)) {\n        translation = translations[locale];\n\n        if (this.options.verbose && baseLocale && defaultTranslationKeys) {\n          this.findMissingKeys(translation, defaultTranslationKeys, locale);\n        }\n\n        if (this.options.verbose) {\n          this.validateMessages(translation, locale);\n        }\n\n        if (defaultTranslation) {\n          translation = extend(true, {}, defaultTranslation, translation);\n        }\n\n        fs.writeFileSync(`${outputPath}/${this.filename(locale)}`, this.wrapEntry(translation), { encoding: 'utf8' });\n      }\n    }\n  }\n\n  validateMessages(messages, locale) {\n    forEachMessage(messages, (key, message) => {\n      try {\n        validateMessage(message, locale);\n      } catch (error) {\n        this._logLocale(locale, `\"${key}\" message can not be parsed: ${error.message}`, { warning: true });\n      }\n    });\n  }\n}\n\nmodule.exports = TranslationReducer;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/prop-keys.js":"/* jshint node: true */\n\n'use strict';\n\nconst forEachMessage = require('./for-each-message');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\n/**\n * Turns an object into a single dimensional array of strings\n *\n * propKeys({ a: true, b: { c: true }}) => [\"a\", \"b.c\"]\n *\n * NOTE\" Period within a key are escaped.\n * ie, `propKeys({ 'a.a': true, b: { c: true }})` => `[\"a\\.a\", \"b.c\"]`\n *\n * @method propKeys\n * @param {Object} object\n * @return {Array} Returns array of strings\n * @private\n */\nfunction propKeys(object) {\n  let result = [];\n  forEachMessage(object, key => result.push(key));\n  return result;\n}\n\nmodule.exports = propKeys;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/for-each-message.js":"/* jshint node: true */\n\n'use strict';\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\n/**\n * Flattens the `messages` object and calls `fn` with a key describing\n * the path to the message and the message itself.\n */\nfunction forEachMessage(messages, fn, prefix) {\n  prefix = prefix || '';\n\n  for (let key in messages) {\n    if (messages.hasOwnProperty(key)) {\n      let escapedKey = key.replace(/\\./g, '\\\\.');\n      let value = messages[key];\n      if (typeof value === 'object') {\n        forEachMessage(value, fn, `${prefix}${escapedKey}.`);\n      } else {\n        fn(`${prefix}${escapedKey}`, value);\n      }\n    }\n  }\n}\n\nmodule.exports = forEachMessage;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/validate-message.js":"/* jshint node: true */\n\n'use strict';\n\nconst messageParser = require('intl-messageformat-parser');\n\nconst pluralCategories = require('./plural-categories');\nconst ordinalCategories = require('./ordinal-categories');\nconst traverse = require('./ast-traverse');\n\nfunction validateMessage(message, locale) {\n  let ast = messageParser.parse(message);\n\n  locale = locale || '';\n\n  let language = locale.split('-')[0];\n  let validPlurals = pluralCategories[language];\n  let validOrdinals = ordinalCategories[language];\n\n  traverse(ast, {\n    pluralFormat: node => {\n      let hasOtherSelector = node.options\n        .map(it => it.selector.trim())\n        .filter(selector => selector === 'other').length !== 0;\n\n      if (!hasOtherSelector) {\n        throw new MissingOtherSelectorError();\n      }\n\n      if (!locale) {\n        return;\n      }\n\n      let validSelectors = node.ordinal ? validOrdinals : validPlurals;\n\n      let selectors = node.options.map(it => it.selector.trim());\n      let invalidSelectors = selectors.filter(selector => {\n        return validSelectors.indexOf(selector) === -1 && !/=\\d+/.test(selector);\n      });\n\n      if (invalidSelectors.length) {\n        if (node.ordinal) {\n          throw new UnknownOrdinalCategoriesError(invalidSelectors);\n        } else {\n          throw new UnknownPluralCategoriesError(invalidSelectors);\n        }\n      }\n    },\n\n    selectFormat: node => {\n      let hasOtherSelector = node.options\n        .map(it => it.selector.trim())\n        .filter(selector => selector === 'other').length !== 0;\n\n      if (!hasOtherSelector) {\n        throw new MissingOtherSelectorError();\n      }\n    }\n  });\n}\n\nclass UnknownPluralCategoriesError extends Error {\n  constructor(categories) {\n    super(\n      categories.length === 1\n        ? `Unknown plural category: ${categories[0]}`\n        : `Unknown plural categories: ${categories.join(', ')}`\n    );\n  }\n}\n\nclass UnknownOrdinalCategoriesError extends Error {\n  constructor(categories) {\n    super(\n      categories.length === 1\n        ? `Unknown ordinal category: ${categories[0]}`\n        : `Unknown ordinal categories: ${categories.join(', ')}`\n    );\n  }\n}\n\nclass MissingOtherSelectorError extends Error {\n  constructor() {\n    super('Missing selector: other');\n  }\n}\n\nmodule.exports = validateMessage;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/plural-categories.js":"/* jshint node: true */\n\n'use strict';\n\nfunction extractPluralCategories() {\n  let plurals = require('cldr-core/supplemental/plurals.json').supplemental['plurals-type-cardinal'];\n\n  let pluralCategories = {};\n  Object.keys(plurals).forEach(locale => {\n    pluralCategories[locale] = Object.keys(plurals[locale]).map(key => key.replace('pluralRule-count-', ''));\n  });\n\n  return pluralCategories;\n}\n\nmodule.exports = extractPluralCategories();\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/ordinal-categories.js":"/* jshint node: true */\n\n'use strict';\n\nfunction extractOrdinalCategories() {\n  let ordinals = require('cldr-core/supplemental/ordinals.json').supplemental['plurals-type-ordinal'];\n\n  let ordinalCategories = {};\n  Object.keys(ordinals).forEach(locale => {\n    ordinalCategories[locale] = Object.keys(ordinals[locale]).map(key => key.replace('pluralRule-count-', ''));\n  });\n\n  return ordinalCategories;\n}\n\nmodule.exports = extractOrdinalCategories();\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/utils/ast-traverse.js":"/* jshint node: true */\n\n'use strict';\n\nfunction traverse(node, visitor) {\n  if (!node || !node.type) {\n    return;\n  }\n\n  if (visitor[node.type]) {\n    visitor[node.type](node);\n  }\n\n  switch (node.type) {\n    case 'messageFormatPattern': {\n      node.elements.forEach(it => traverse(it, visitor));\n      break;\n    }\n    case 'argumentElement': {\n      traverse(node.format, visitor);\n      break;\n    }\n    case 'optionalFormatPattern': {\n      traverse(node.value, visitor);\n      break;\n    }\n    case 'pluralFormat': {\n      node.options.forEach(it => traverse(it, visitor));\n      break;\n    }\n    case 'selectFormat': {\n      node.options.forEach(it => traverse(it, visitor));\n      break;\n    }\n  }\n}\n\nmodule.exports = traverse;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/.eslintrc.js":"module.exports = {\n  root: true,\n  parserOptions: {\n    ecmaVersion: 6,\n    sourceType: 'module'\n  },\n  extends: 'eslint:recommended',\n  plugins: [\n    \"prettier\"\n  ],\n  env: {\n    browser: true\n  },\n  rules: {\n    \"prettier/prettier\": [\"error\", {\n      \"singleQuote\": true,\n      \"printWidth\": 120\n    }]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/config/ember-intl.js":"/*jshint node:true*/\n\nmodule.exports = function(environment) {\n  return {\n    /**\n    * The locales that are application supports.\n    *\n    * This is optional and is automatically set if project stores translations\n    * where ember-intl is able to look them up (<project root>/translations/).\n    *\n    * If the project relies on side-loading translations, then you must explicitly\n    * list out the locales. i.e: ['en-us', 'en-gb', 'fr-fr']\n    *\n    * @property locales\n    * @type {Array?}\n    * @default \"null\"\n    */\n    locales: null,\n\n    /**\n    * baseLocale is used to determine if translation keys are missing from other locales.\n    * This property is optional, and if you rely on sideloading translations then\n    * this should be null\n    *\n    * @property baseLocale\n    * @type {String?}\n    * @default \"null\"\n    */\n    baseLocale: null,\n\n    /**\n    * autoPolyfill, when true will automatically inject the IntlJS polyfill\n    * into index.html\n    *\n    * @property autoPolyfill\n    * @type {Boolean}\n    * @default \"false\"\n    */\n    autoPolyfill: false,\n\n    /**\n    * disablePolyfill prevents the polyfill from being bundled in the asset folder of the build\n    *\n    * @property disablePolyfill\n    * @type {Boolean}\n    * @default \"false\"\n    */\n    disablePolyfill: false,\n\n    /**\n    * prevents the translations from being bundled with the application code.\n    * This enables asynchronously loading the translations for the active locale\n    * by fetching them from the asset folder of the build.\n    *\n    * See: https://github.com/jasonmit/ember-intl/blob/master/docs/asynchronously-loading-translations.md\n    *\n    * @property publicOnly\n    * @type {Boolean}\n    * @default \"false\"\n    */\n    publicOnly: false\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return {};\n};\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/adapters/default.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\nimport Translation from '../models/translation';\n\nconst { computed, get, A: emberArray, getOwner } = Ember;\n\nconst DefaultTranslationAdapter = Ember.Object.extend({\n  _seen: null,\n\n  /** @private **/\n  locales: computed('_seen.[]', function() {\n    return get(this, '_seen').map(l => l.localeName);\n  }).readOnly(),\n\n  /** @private **/\n  init() {\n    this._super();\n    this._seen = emberArray();\n  },\n\n  /** @private **/\n  lookupLocale(localeName) {\n    return this._seen.findBy('localeName', localeName);\n  },\n\n  /** @private **/\n  localeFactory(localeName) {\n    const owner = getOwner(this);\n    const lookupName = `ember-intl@translation:${localeName}`;\n    let model = owner.lookup(lookupName);\n\n    if (model) {\n      return model;\n    }\n\n    let Klass;\n    if (owner.hasRegistration('model:ember-intl-translation')) {\n      Klass = owner.factoryFor('model:ember-intl-translation').class;\n    } else {\n      Klass = Translation;\n    }\n\n    const ModelKlass = Klass.extend();\n    Object.defineProperty(ModelKlass.proto(), 'localeName', {\n      writable: false,\n      enumerable: true,\n      value: localeName\n    });\n\n    owner.register(lookupName, ModelKlass);\n    model = owner.lookup(lookupName);\n    this._seen.pushObject(model);\n\n    return model;\n  },\n\n  /** @private **/\n  has(localeName, translationKey) {\n    const model = this.lookupLocale(localeName);\n\n    return model && model.has(translationKey);\n  },\n\n  /** @private **/\n  lookup(localeNames, translationKey) {\n    for (let i = 0; i < localeNames.length; i++) {\n      const localeName = localeNames[i];\n      const model = this.lookupLocale(localeName);\n\n      if (model && model.has(translationKey)) {\n        return model.getValue(translationKey);\n      }\n    }\n  },\n\n  /** @private **/\n  translationsFor(localeName) {\n    return this.localeFactory(localeName);\n  },\n\n  /** @private **/\n  findTranslationByKey(localeNames, translationKey) {\n    return this.lookup(localeNames, translationKey);\n  }\n});\n\nexport default DefaultTranslationAdapter;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/formatters/-base.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\nimport arrayToHash from '../utils/array-to-hash';\nimport links from '../utils/links';\n\nconst {\n  get,\n  String: emberString,\n  Object: EmberObject\n} = Ember;\n\nconst { camelize } = emberString;\n\nconst FormatterBase = EmberObject.extend({\n  options: null,\n\n  init() {\n    this._super();\n\n    if (this.constructor === FormatterBase) {\n      throw new Error('FormatHelper is an abstract class, can not be instantiated directly.');\n    }\n\n    this.options = arrayToHash(this.constructor.supportedOptions);\n  },\n\n  /**\n  * Filters out all of the whitelisted formatter options\n  *\n  * @method filterSupporedOptions\n  * @param {Object} Options object\n  * @return {Object} Options object containing just whitelisted options\n  * @private\n  */\n  filterSupporedOptions(options) {\n    if (!options) {\n      return {};\n    }\n\n    let supportedOptions = {};\n    let foundMatch = false;\n    let camelizedKey;\n\n    for (let key in options) {\n      camelizedKey = camelize(key);\n      if (this.options[camelizedKey]) {\n        foundMatch = true;\n        supportedOptions[camelizedKey] = options[key];\n      }\n    }\n\n    if (foundMatch) {\n      return supportedOptions;\n    }\n  },\n\n  format() {\n    throw new Error('not implemented');\n  },\n\n  /**\n  * Invokes the Intl formatter methods\n  *\n  * @method _format\n  * @param {value} Raw input value that needs formatting\n  * @return {Object} Formatter options hash\n  * @return {Object} Format options hash\n  * @private\n  */\n  _format(value, formatterOptions, formatOptions, { locale }) {\n    if (!locale) {\n      throw new Error(\n        `No locale specified.  This is typically handled within routes/application.js. Documentation: ${links.unsetLocale}`\n      );\n    }\n\n    return get(this, 'formatter')(locale, formatterOptions).format(value, formatOptions);\n  }\n});\n\nFormatterBase.reopenClass({\n  supportedOptions: ['locale', 'format'],\n  concatenatedProperties: ['supportedOptions']\n});\n\nexport default FormatterBase;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/formatters/format-date.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\nimport createFormatCache from 'intl-format-cache';\n\nimport Formatter from './-base';\n\nconst { assert, computed } = Ember;\n\nfunction assertIsDate(date, errMsg) {\n  assert(errMsg, isFinite(date));\n}\n\nconst FormatDate = Formatter.extend({\n  formatter: computed({\n    get() {\n      return createFormatCache(Intl.DateTimeFormat);\n    }\n  }).readOnly(),\n\n  format(value, options, ctx) {\n    const dateTime = new Date(value);\n    assertIsDate(dateTime, 'A date or timestamp must be provided to format-date');\n\n    const formatOptions = this.filterSupporedOptions(options);\n\n    return this._format(dateTime, formatOptions, undefined, ctx);\n  }\n});\n\nFormatDate.reopenClass({\n  formatType: 'date',\n  supportedOptions: [\n    'localeMatcher',\n    'timeZone',\n    'hour12',\n    'formatMatcher',\n    'weekday',\n    'era',\n    'year',\n    'month',\n    'day',\n    'hour',\n    'minute',\n    'second',\n    'timeZoneName'\n  ]\n});\n\nexport default FormatDate;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/formatters/format-html-message.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\nimport FormatterMessage from './format-message';\n\nconst { String: emberString, Handlebars: emberHandlebars } = Ember;\n\nconst FormatHtmlMessage = FormatterMessage.extend({\n  escapeProps(options) {\n    if (!options) {\n      return;\n    }\n\n    return Object.keys(options).reduce(\n      (result, hashKey) => {\n        let value = options[hashKey];\n\n        if (typeof value === 'string') {\n          value = emberHandlebars.Utils.escapeExpression(value);\n        }\n\n        result[hashKey] = value;\n\n        return result;\n      },\n      {}\n    );\n  },\n\n  format(value, options, ctx) {\n    let escapedOptions = this.escapeProps(options);\n    let superResult = this._super(value, escapedOptions, ctx);\n\n    return emberString.htmlSafe(superResult);\n  }\n});\n\nFormatHtmlMessage.reopenClass({\n  formatType: 'html-message'\n});\n\nexport default FormatHtmlMessage;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/formatters/format-message.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\nimport createFormatCache from 'intl-format-cache';\nimport IntlMessageFormat from 'intl-messageformat';\n\nimport Formatter from './-base';\n\nconst { get, computed } = Ember;\n\nconst FormatMessage = Formatter.extend({\n  formatter: computed({\n    get() {\n      return createFormatCache(IntlMessageFormat);\n    }\n  }).readOnly(),\n\n  format(value, options, { formats, locale }) {\n    return get(this, 'formatter')(value, locale, formats).format(options);\n  }\n});\n\nFormatMessage.reopenClass({\n  formatType: 'message'\n});\n\nexport default FormatMessage;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/formatters/format-number.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\nimport createFormatCache from 'intl-format-cache';\n\nimport Formatter from './-base';\n\nconst { computed } = Ember;\n\nconst FormatNumber = Formatter.extend({\n  formatter: computed({\n    get() {\n      return createFormatCache(Intl.NumberFormat);\n    }\n  }).readOnly(),\n\n  format(value, options, ctx) {\n    return this._format(value, this.filterSupporedOptions(options), undefined, ctx);\n  }\n});\n\nFormatNumber.reopenClass({\n  formatType: 'number',\n  supportedOptions: [\n    'localeMatcher',\n    'style',\n    'currency',\n    'currencyDisplay',\n    'useGrouping',\n    'minimumIntegerDigits',\n    'minimumFractionDigits',\n    'maximumFractionDigits',\n    'minimumSignificantDigits',\n    'maximumSignificantDigits'\n  ]\n});\n\nexport default FormatNumber;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/formatters/format-relative.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\nimport createFormatCache from 'intl-format-cache';\nimport IntlRelativeFormat from 'intl-relativeformat';\n\nimport Formatter from './-base';\n\nconst { assert, computed } = Ember;\n\nfunction assertIsDate(date, errMsg) {\n  assert(errMsg, isFinite(date));\n}\n\nconst FormatRelative = Formatter.extend({\n  formatter: computed({\n    get() {\n      return createFormatCache(IntlRelativeFormat);\n    }\n  }).readOnly(),\n\n  format(value, options, ctx) {\n    let dateValue = new Date(value);\n    let formatOptions;\n\n    /* TODO: remove assertion in 3.0, new Intl.DateTimeFormat().format() accepts no arguments */\n    assertIsDate(dateValue, 'A date or timestamp must be provided to format-relative');\n\n    if (options && typeof options.now !== 'undefined') {\n      formatOptions = {\n        now: options.now\n      };\n    }\n\n    return this._format(dateValue, this.filterSupporedOptions(options), formatOptions, ctx);\n  }\n});\n\nFormatRelative.reopenClass({\n  formatType: 'relative',\n  supportedOptions: ['style', 'units']\n});\n\nexport default FormatRelative;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/formatters/format-time.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport FormatDateFormatter from './format-date';\n\nconst FormatTime = FormatDateFormatter.extend();\n\nFormatTime.reopenClass({\n  formatType: 'time'\n});\n\nexport default FormatTime;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/-format-base.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\n\nconst { Helper, getOwner, isEmpty, getWithDefault } = Ember;\n\nconst AbstractHelper = Helper.extend({\n  intl: null,\n\n  init() {\n    if (this.constructor === AbstractHelper) {\n      throw new Error('FormatHelper is an abstract class, can not be instantiated directly.');\n    }\n\n    this._super();\n\n    this.intl = getOwner(this).lookup('service:intl');\n    this.intl.on('localeChanged', this, this.recompute);\n  },\n\n  getValue([value]) {\n    return value;\n  },\n\n  format() {\n    throw new Error('not implemented');\n  },\n\n  compute(params, options) {\n    const value = this.getValue(params, options);\n    const allowEmpty = getWithDefault(options, 'allowEmpty', this.allowEmpty);\n\n    if (isEmpty(value)) {\n      if ('fallback' in options) {\n        return options.fallback;\n      }\n\n      if (allowEmpty) {\n        return;\n      }\n\n      if (typeof value === 'undefined') {\n        throw new Error(`${this} helper requires value attribute.`);\n      }\n    }\n\n    return this.format(value, options);\n  },\n\n  willDestroy() {\n    this._super();\n\n    this.intl.off('localeChanged', this, this.recompute);\n  }\n});\n\nexport default AbstractHelper;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/format-date.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport BaseHelper from './-format-base';\n\nexport default BaseHelper.extend({\n  allowEmpty: true,\n\n  format(value, options) {\n    return this.intl.formatDate(value, options);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/format-html-message.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport BaseHelper from './-format-base';\nimport { getValue } from './format-message';\n\nexport default BaseHelper.extend({\n  getValue,\n  helperType: 'format-html-message',\n\n  format(value, options) {\n    return this.intl.formatHtmlMessage(value, options);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/format-message.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\n\nimport { LiteralWrapper } from './l';\nimport BaseHelper from './-format-base';\n\nconst { assert, deprecate } = Ember;\n\nexport function getValue([key], options) {\n  if (key && key instanceof LiteralWrapper) {\n    return key.value;\n  }\n\n  assert('[ember-intl] translation lookup attempted but no translation key was provided.', key);\n\n  deprecate(\n    `[ember-intl] {{${this.helperType}}} only accepts translation strings as the first parameter.  You likely want to use the {{t}} helper instead.`,\n    false,\n    {\n      id: `ember-intl-${this.helperType}-string-literals-only`,\n      until: '3.0.0'\n    }\n  );\n\n  const {\n    fallback,\n    allowEmpty,\n    defaultMessage,\n    locale: optionalLocale\n  } = options;\n\n  const fallbackTranslation = defaultMessage || fallback;\n\n  const translation = this.intl.lookup(key, optionalLocale, {\n    resilient: allowEmpty || typeof fallbackTranslation === 'string'\n  });\n\n  return typeof translation === 'string' ? translation : fallbackTranslation;\n}\n\nexport default BaseHelper.extend({\n  getValue,\n  helperType: 'format-message',\n\n  format(value, options) {\n    return this.intl.formatMessage(value, options);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/format-number.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport BaseHelper from './-format-base';\n\nexport default BaseHelper.extend({\n  format(value, options) {\n    return this.intl.formatNumber(value, options);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/format-relative.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\nimport BaseHelper from './-format-base';\n\nconst runBind = Ember.run.bind;\n\nexport default BaseHelper.extend({\n  format(params, hash) {\n    return this.intl.formatRelative(params, hash);\n  },\n\n  compute(params, hash) {\n    this.clearTimer();\n\n    if (hash && typeof hash.interval !== 'undefined') {\n      /* setTimeout versus Ember.run.later so tests will not wait infinitely */\n      this.timer = setTimeout(runBind(this, this.recompute), parseInt(hash.interval, 10));\n    }\n\n    return this._super(params, hash);\n  },\n\n  clearTimer() {\n    clearTimeout(this.timer);\n  },\n\n  willDestroy() {\n    this._super();\n\n    this.clearTimer();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/format-time.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nimport BaseHelper from './-format-base';\n\nexport default BaseHelper.extend({\n  format(value, options) {\n    return this.intl.formatTime(value, options);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/intl-get.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\n\nimport { LiteralWrapper } from './l';\n\nconst { Helper, inject, get, deprecate } = Ember;\n\nconst IntlGetHelper = Helper.extend({\n  intl: inject.service(),\n\n  init() {\n    this._super();\n\n    deprecate(`[ember-int] intl-get is deprecated, use {{t 'translation.key'}}`, false, {\n      id: 'ember-intl-t-helper',\n      until: '3.0.0'\n    });\n\n    get(this, 'intl').on('localeChanged', this, this.recompute);\n  },\n\n  compute(params, hash = {}) {\n    return new LiteralWrapper(get(this, 'intl').lookup(params[0], hash.locale));\n  },\n\n  willDestroy() {\n    this._super();\n\n    get(this, 'intl').off('localeChanged', this, this.recompute);\n  }\n});\n\nexport default IntlGetHelper;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/l.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\n\nexport function LiteralWrapper(value) {\n  this.value = value;\n}\n\nexport default Ember.Helper.extend({\n  compute([translation]) {\n    return new LiteralWrapper(translation);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/helpers/t.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\n\nimport BaseHelper from './-format-base';\n\nconst { assert } = Ember;\n\nexport function getValue([translationKey], options) {\n  assert('[ember-intl] translation lookup attempted but no translation key was provided.', translationKey);\n\n  const {\n    fallback,\n    allowEmpty,\n    defaultMessage,\n    locale: optionalLocale\n  } = options;\n\n  const fallbackTranslation = defaultMessage || fallback;\n\n  const translation = this.intl.lookup(translationKey, optionalLocale, {\n    resilient: allowEmpty || typeof fallbackTranslation === 'string'\n  });\n\n  return typeof translation === 'string' ? translation : fallbackTranslation;\n}\n\nexport default BaseHelper.extend({\n  getValue,\n\n  format(value, options) {\n    if (options && options.htmlSafe === true) {\n      return this.intl.formatHtmlMessage(value, options);\n    }\n\n    return this.intl.formatMessage(value, options);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/models/translation.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\n\nconst { get, set, deprecate } = Ember;\n\nconst TranslationModel = Ember.Object.extend({\n  localeName: null,\n\n  init() {\n    this._super();\n\n    if (!this.translations) {\n      this.translations = Object.create(null);\n    }\n  },\n\n  /**\n   * Add a single translation\n   */\n  addTranslation(key, value) {\n    set(this.translations, key, value);\n  },\n\n  /**\n   * Adds a translation hash\n   */\n  addTranslations(translationsObject) {\n    for (let key in translationsObject) {\n      this.addTranslation(key, translationsObject[key]);\n    }\n  },\n\n  /**\n   * Custom accessor hook that can be overridden.\n   * This would enable consumers that have dot notated strings\n   * to implement this function as `return this[key];`\n   */\n  getValue(key) {\n    let translation = get(this.translations, key);\n\n    if (typeof translation === 'string') {\n      return translation;\n    }\n\n    translation = get(this, key);\n\n    if (typeof translation === 'string') {\n      deprecate('[ember-intl] translations should be added via the `addTranslations`/`addTranslation` API.', false, {\n        id: 'ember-intl-add-translation',\n        until: '3.0.0'\n      });\n\n      return translation;\n    }\n  },\n\n  /**\n   * Determines if the translation model contains a key\n   */\n  has(key) {\n    return typeof this.getValue(key) === 'string';\n  }\n});\n\nexport default TranslationModel;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/services/intl.js":"/* globals requirejs, Intl */\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport Ember from 'ember';\nimport IntlMessageFormat from 'intl-messageformat';\nimport IntlRelativeFormat from 'intl-relativeformat';\n\nimport links from '../utils/links';\nimport isArrayEqual from '../utils/is-equal';\nimport normalizeLocale from '../utils/normalize-locale';\n\nimport FormatDate from '../formatters/format-date';\nimport FormatTime from '../formatters/format-time';\nimport FormatNumber from '../formatters/format-number';\nimport FormatMessage from '../formatters/format-message';\nimport FormatRelative from '../formatters/format-relative';\nimport FormatHtmlMessage from '../formatters/format-html-message';\n\nconst {\n  assign,\n  assert,\n  getOwner,\n  computed,\n  makeArray,\n  get,\n  set,\n  RSVP,\n  Service,\n  Evented,\n  deprecate\n} = Ember;\n\nfunction formatterProxy(ctr) {\n  return function(value, options, formats) {\n    let formatOptions = options;\n\n    if (options && typeof options.format === 'string') {\n      formatOptions = assign({}, this.getFormat(ctr.formatType, formatOptions.format), formatOptions);\n    }\n\n    if (!this._formatters[ctr.formatType]) {\n      this._formatters[ctr.formatType] = ctr.create();\n    }\n\n    let formatter = this._formatters[ctr.formatType];\n\n    return formatter.format(value, formatOptions, {\n      formats: formats || get(this, 'formats'),\n      locale: this._localeWithDefault(formatOptions && formatOptions.locale)\n    });\n  };\n}\n\nconst IntlService = Service.extend(Evented, {\n  _locale: null,\n\n  /** @public **/\n  locale: computed('_locale', {\n    set() {\n      throw new Error('Use `setLocale` to change the application locale');\n    },\n    get() {\n      return get(this, '_locale');\n    }\n  }),\n\n  /** @private **/\n  adapter: computed({\n    get() {\n      return this._owner.lookup('ember-intl@adapter:default');\n    }\n  }),\n\n  /** @public **/\n  formats: computed({\n    get() {\n      return this._owner.resolveRegistration('formats:main');\n    }\n  }),\n\n  /** @public **/\n  formatHtmlMessage: formatterProxy(FormatHtmlMessage),\n\n  /** @public **/\n  formatRelative: formatterProxy(FormatRelative),\n\n  /** @public **/\n  formatMessage: formatterProxy(FormatMessage),\n\n  /** @public **/\n  formatNumber: formatterProxy(FormatNumber),\n\n  /** @public **/\n  formatTime: formatterProxy(FormatTime),\n\n  /** @public **/\n  formatDate: formatterProxy(FormatDate),\n\n  /** @private **/\n  requirejs: requirejs,\n\n  /** @public **/\n  init() {\n    this._super();\n\n    this._owner = getOwner(this);\n    this._formatters = Object.create(null);\n\n    if (typeof Intl === 'undefined') {\n      Ember.warn(`[ember-intl] Intl API is unavailable in this environment.\\nSee: ${links.polyfill}`, false, {\n        id: 'ember-intl-undefined-intljs'\n      });\n    }\n\n    this._hydrate();\n  },\n\n  /**\n   * Returns an array of registered locale names\n   *\n   * @property locales\n   * @public\n   */\n  locales: computed.readOnly('adapter.locales'),\n\n  /**\n   * Peeks into the requirejs map and registers all locale data objects found.\n   * This is also very likely to be removed soon.\n   *\n   * @private\n   */\n  _hydrate() {\n    const config = this._owner.resolveRegistration('config:environment');\n    const cldrs = this._lookupByFactoryType('cldrs', config.modulePrefix);\n    const translations = this._lookupByFactoryType('translations', config.modulePrefix);\n\n    if (!cldrs.length) {\n      Ember.warn(\n        `[ember-intl] project is missing CLDR data\\nIf you are asynchronously loading translation, see: ${links.asyncTranslations}.`,\n        false,\n        {\n          id: 'ember-intl-missing-cldr-data'\n        }\n      );\n    }\n\n    cldrs\n      .map(moduleName => {\n        return this._owner.resolveRegistration(`cldr:${moduleName.split('\\/').pop()}`);\n      })\n      .forEach(data => data.forEach(this.addLocaleData));\n\n    translations.forEach(moduleName => {\n      const localeName = moduleName.split('\\/').pop();\n\n      this.addTranslations(localeName, this._owner.resolveRegistration(`translation:${localeName}`));\n    });\n  },\n\n  /** @private **/\n  _lookupByFactoryType(type, modulePrefix) {\n    return Object.keys(this.requirejs._eak_seen).filter(key => {\n      return key.indexOf(`${modulePrefix}\\/${type}\\/`) === 0;\n    });\n  },\n\n  /** @private **/\n  _localeWithDefault(localeName) {\n    if (!localeName) {\n      return get(this, '_locale') || [];\n    }\n\n    if (typeof localeName === 'string') {\n      return makeArray(localeName).map(normalizeLocale);\n    }\n\n    if (Array.isArray(localeName)) {\n      return localeName.map(normalizeLocale);\n    }\n  },\n\n  /** @public **/\n  lookup(key, localeName, options = {}) {\n    const localeNames = this._localeWithDefault(localeName);\n    const translation = get(this, 'adapter').lookup(localeNames, key);\n\n    if (!options.resilient && translation === undefined) {\n      const missingMessage = this._owner.resolveRegistration('util:intl/missing-message');\n\n      return missingMessage.call(this, key, localeNames);\n    }\n\n    return translation;\n  },\n\n  /** @public **/\n  t(key, ...args) {\n    const [options] = args;\n    const translation = this.lookup(key, options && options.locale, {\n      resilient: options && typeof options.fallback === 'string'\n    });\n\n    const value = typeof translation === 'string' ? translation : options.fallback;\n\n    if (options && options.htmlSafe) {\n      return this.formatHtmlMessage(value, ...args);\n    }\n\n    return this.formatMessage(value, ...args);\n  },\n\n  /** @public **/\n  exists(key, localeName) {\n    const localeNames = this._localeWithDefault(localeName);\n    const adapter = get(this, 'adapter');\n\n    assert(`[ember-intl] locale is unset, cannot lookup '${key}'`, Array.isArray(localeNames) && localeNames.length);\n\n    return localeNames.some(localeName => {\n      return adapter.has(localeName, key);\n    });\n  },\n\n  /** @public **/\n  getLocalesByTranslations() {\n    deprecate('[ember-intl] `getLocalesByTranslations` is deprecated, use `locales` computed property', false, {\n      id: 'ember-intl-locales-cp',\n      until: '3.0.0'\n    });\n\n    return get(this, 'locales');\n  },\n\n  /**\n  * A utility method for registering CLDR data for\n  * intl-messageformat and intl-relativeformat.  This data is derived\n  * from formatjs-extract-cldr-data\n  *\n  * @method addLocaleData\n  * @param {Object} locale data\n  * @public\n  */\n  addLocaleData(data) {\n    IntlMessageFormat.__addLocaleData(data);\n    IntlRelativeFormat.__addLocaleData(data);\n  },\n\n  /** @public **/\n  addTranslation(localeName, key, value) {\n    return this.localeFactory(localeName).then(locale => {\n      return locale.addTranslation(key, value);\n    });\n  },\n\n  /** @public **/\n  addTranslations(localeName, payload) {\n    return this.localeFactory(localeName).then(locale => {\n      return locale.addTranslations(payload);\n    });\n  },\n\n  /** @public **/\n  setLocale(localeName) {\n    if (!localeName) {\n      return;\n    }\n\n    const proposed = makeArray(localeName).map(normalizeLocale);\n    const current = get(this, '_locale');\n\n    if (!isArrayEqual(proposed, current)) {\n      this.propertyWillChange('locale');\n      set(this, '_locale', proposed);\n      this.propertyDidChange('locale');\n      this.trigger('localeChanged');\n    }\n  },\n\n  /** @private **/\n  getFormat(formatType, format) {\n    const formats = get(this, 'formats');\n\n    if (formats && formatType && typeof format === 'string') {\n      return get(formats, `${formatType}.${format}`);\n    }\n  },\n\n  /** @public **/\n  localeFactory(localeName) {\n    return RSVP.cast(get(this, 'adapter').localeFactory(normalizeLocale(localeName), true));\n  },\n\n  /** @public **/\n  createLocale(localeName, payload) {\n    deprecate('[ember-intl] `createLocale` is deprecated, use `addTranslations`', false, {\n      id: 'ember-intl-create-locale',\n      until: '3.0.0'\n    });\n\n    return this.addTranslations(localeName, payload);\n  },\n\n  /** @public **/\n  findTranslationByKey(key, localeName, options) {\n    return this.lookup(key, localeName, options);\n  },\n\n  /** @public **/\n  translationsFor(localeName) {\n    return this.localeFactory(localeName);\n  }\n});\n\nexport default IntlService;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/utils/array-to-hash.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nfunction arrayToHash(array) {\n  const len = array.length;\n  const out = Object.create(null);\n  let i = 0;\n\n  for (; i < len; i++) {\n    const key = array[i];\n    out[key] = key;\n  }\n\n  return out;\n}\n\nexport default arrayToHash;\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/utils/is-equal.js":"import Ember from 'ember';\n\nexport default function(a, b) {\n  if (!Ember.isArray(a) || !Ember.isArray(b)) {\n    return false;\n  }\n  if (a === b) {\n    return true;\n  }\n\n  return a.toString() === b.toString();\n}\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/utils/links.js":"const PROJECT_URL = 'https://github.com/jasonmit/ember-intl';\n\nexport default {\n  unsetLocale: `${PROJECT_URL}#setting-runtime-locale`,\n  asyncTranslations: `${PROJECT_URL}/blob/master/docs/asynchronously-loading-translations.md#asynchronous-loading-of-translations`,\n  polyfill: `${PROJECT_URL}/blob/master/docs/intljs-polyfill.md`\n};\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/utils/macro.js":"/*\n * <3 ember-i18n <3\n * https://github.com/jamesarosen/ember-i18n/blob/master/addon/utils/macro.js\n */\nimport Ember from 'ember';\n\nconst { get, assert, computed } = Ember;\nconst keys = Object.keys;\n\nfunction values(object) {\n  return keys(object).map(key => object[key]);\n}\n\nfunction mapPropertiesByHash(object, hash) {\n  const result = {};\n\n  keys(hash).forEach(function(key) {\n    result[key] = get(object, hash[key]);\n  });\n\n  return result;\n}\n\nexport default function createTranslatedComputedProperty(key, options) {\n  const hash = options || Object.create(null);\n  const dependentKeys = ['intl.locale'].concat(values(hash));\n\n  return computed(...dependentKeys, function() {\n    const intl = get(this, 'intl');\n    assert(\n      `Cannot translate \"${key}\".\\n${this} does not have an intl property set. Try: intl: Ember.inject.service()`,\n      intl\n    );\n\n    return intl.t(key, mapPropertiesByHash(this, hash));\n  }).readOnly();\n}\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/addon/utils/normalize-locale.js":"export default function(localeName) {\n  if (typeof localeName === 'string') {\n    return localeName.replace(/_/g, '-').toLowerCase();\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/format-date.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/helpers/format-date';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/format-html-message.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/helpers/format-html-message';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/format-message.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/helpers/format-message';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/format-number.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/helpers/format-number';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/format-relative.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/helpers/format-relative';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/format-time.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/helpers/format-time';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/intl-get.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/helpers/intl-get';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/l.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/helpers/l';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/t-html.js":"export { default } from 'ember-intl/helpers/format-html-message';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/helpers/t.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/helpers/t';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/services/intl.js":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nexport { default } from 'ember-intl/services/intl';\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/lib/broccoli/intl-polyfill.js":"/* jshint node: true */\n\n'use strict';\n\nlet path = require('path');\nlet Funnel = require('broccoli-funnel');\nlet mergeTrees = require('broccoli-merge-trees');\nlet renameTree = require('broccoli-stew').rename;\nlet UnwatchedDir = require('broccoli-source').UnwatchedDir;\n\nfunction lowercaseTree(tree) {\n  return renameTree(tree, function(filepath) {\n    return filepath.toLocaleLowerCase();\n  });\n}\n\nmodule.exports = function intlPolyfill(opts) {\n  let tree = new UnwatchedDir(path.dirname(require.resolve('intl')));\n  let trees = [];\n\n  trees.push(\n    new Funnel(tree, {\n      srcDir: 'dist',\n      files: ['Intl.js.map'],\n      destDir: opts.destDir\n    })\n  );\n\n  let polyfillTree = new Funnel(tree, {\n    srcDir: 'dist',\n    files: ['Intl.complete.js', 'Intl.js', 'Intl.min.js'],\n    destDir: opts.destDir\n  });\n\n  let localeFunnel = {\n    srcDir: 'locale-data/jsonp',\n    destDir: `${opts.destDir}/locales`\n  };\n\n  if (opts.locales.length) {\n    localeFunnel.include = opts.locales.map(locale => new RegExp(`^${locale}.js$`, 'i'));\n  }\n\n  let localesTree = new Funnel(tree, localeFunnel);\n\n  trees.push(lowercaseTree(mergeTrees([polyfillTree, localesTree])));\n\n  return mergeTrees(trees);\n};\n","/home/travis/build/npmtest/node-npmtest-ember-intl/node_modules/ember-intl/app/utils/intl/missing-message.js":"import Ember from 'ember';\nimport links from 'ember-intl/utils/links';\n\nconst { warn } = Ember;\n\nexport default function missingMessage(key, locales) {\n  if (!locales) {\n    warn(`[ember-intl] no locale has been set. Documentation: ${links.unsetLocale}`, false, {\n      id: 'ember-intl-no-locale-set'\n    });\n  } else {\n    warn(`[ember-intl] translation: '${key}' on locale: '${locales.join(', ')}' was not found.`, false, {\n      id: 'ember-intl-missing-translation'\n    });\n  }\n\n  return `Missing translation: ${key}`;\n}\n"}